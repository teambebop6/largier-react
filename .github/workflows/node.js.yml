# This workflow will do a clean installation of node dependencies, cache/restore them, build the source code and run tests across different versions of node
# For more information see: https://help.github.com/actions/language-and-framework-guides/using-nodejs-with-github-actions

name: Node.js CI

on:
  push:
    branches:
      - main
      - feature/*
      - release/**
  pull_request:
    branches:
      - main
      - release/**

env:
  ECOSYSTEM_CONFIG_JS: ${{ secrets.ECOSYSTEM_CONFIG_JS }}
  CONFIG_DEV: ${{ secrets.CONFIG_DEV }}
  CONFIG_PROD: ${{ secrets.CONFIG_PROD }}

jobs:
  build_and_archive:
    environment: release
    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [16.x]

    steps:
      - uses: actions/checkout@v3
      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'
      - name: Build
        run: |
          npm ci
          npm install -g pm2
          npm install -g cpx
          npm install -D
          CI=false npm run build_ci
          bash dev/CI/load_secrects.sh
      - name: Package dist files
        uses: vimtor/action-zip@v1
        with:
          files: dist/
          dest: deploy/dist.${{github.run_id}}.zip
#      - name: Archive production artifacts
#        uses: actions/upload-artifact@v3
#        if: contains(github.ref, 'refs/heads/release/')
#        with:
#          name: dist
#          path: |
#            dist
      - name: Generate package related files
#        if: contains(github.ref, 'refs/heads/release/')
        run: |
          echo "dist.${{github.run_id}}.zip" > deploy/fileInfo
          cat ./dev/CI/deployfiles/deploy.scripts | sed -r 's/@@ZIP_FILE_NAME@@/dist.${{github.run_id}}.zip/g' >> deploy/dist.${{github.run_id}}.zip.scripts
          echo dist.${{github.run_id}}.zip.scripts >> deploy/fileInfo
      - name: Publish
        uses: nogsantos/scp-deploy@master
#        if: contains(github.ref, 'refs/heads/release/')
        with:
          src: ./deploy
          host: ${{ secrets.DEPLOY_HOST }}
          remote: ${{ secrets.DEPLOY_DIR }}
          port: ${{ secrets.DEPLOY_PORT }}
          user: ${{ secrets.DEPLOY_USER }}
          key: ${{ secrets.DEPLOY_KEY }}
